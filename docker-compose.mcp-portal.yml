# =============================================================================
# MCP Portal - Working Docker Compose Configuration
# =============================================================================
# Simplified configuration with improved build process
# =============================================================================

services:
  # =============================================================================
  # MCP Portal Application (Backend + Frontend)
  # =============================================================================
  portal:
    build:
      context: .
      dockerfile: Dockerfile.mcp-portal
      args:
        GO_VERSION: 1.24.5
        NODE_VERSION: 22
    image: mcp-portal:latest
    container_name: mcp-portal
    restart: unless-stopped
    ports:
      - "3000:3000" # Frontend
      - "8080:8080" # Backend API
    environment:
      # Backend Configuration
      MCP_PORTAL_HOST: 0.0.0.0
      MCP_PORTAL_PORT: 8080
      MCP_PORTAL_DATABASE_HOST: postgres
      MCP_PORTAL_DATABASE_PORT: 5432
      MCP_PORTAL_DATABASE_DATABASE: ${POSTGRES_DB:-mcp_portal}
      MCP_PORTAL_DATABASE_USERNAME: ${POSTGRES_USER:-mcp_user}
      MCP_PORTAL_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-change_me}
      MCP_PORTAL_DATABASE_SSL_MODE: disable

      # Redis Configuration
      MCP_PORTAL_REDIS_ADDRS: redis:6379
      MCP_PORTAL_REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Authentication
      AZURE_TENANT_ID: ${AZURE_TENANT_ID:-your_tenant_id}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-your_client_id}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET:-your_client_secret}
      JWT_SECRET: ${JWT_SECRET:-change_me_to_a_secure_secret}

      # Frontend Configuration
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8080}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
      NEXT_PUBLIC_ENABLE_ADMIN: ${NEXT_PUBLIC_ENABLE_ADMIN:-true}

    volumes:
      # Mount Docker socket with fallback for non-Docker Desktop environments
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Persistent data storage
      - portal-data:/app/data
      - portal-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Add group_add for Docker socket access
    group_add:
      - ${DOCKER_GID:-999} # Docker group ID, typically 999 or 998

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:17-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_portal}
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Mount initialization scripts if they exist
      - ./cmd/docker-mcp/portal/database/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Configurable port for debugging
    networks:
      - mcp-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_portal}",
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:8-alpine
    container_name: mcp-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379" # Configurable port for debugging
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

# =============================================================================
# Networks
# =============================================================================
networks:
  mcp-network:
    driver: bridge
    name: mcp-portal-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres-data:
    name: mcp-portal-postgres-data
  redis-data:
    name: mcp-portal-redis-data
  portal-data:
    name: mcp-portal-data
  portal-logs:
    name: mcp-portal-logs
