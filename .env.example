# =================================================================
# MCP Portal Unified Environment Configuration
# =================================================================
# Copy this file to .env and update with your values
# Used by Docker Compose for all services (frontend, backend, database, redis)
# Based on cmd/docker-mcp/portal/frontend/.env.local.unified.example
# =================================================================

# ========================================
# SHARED CONFIGURATION (Used by multiple services)
# ========================================

# Azure AD Configuration (REQUIRED - Get from Azure Portal)
AZURE_TENANT_ID=your-tenant-id-here
AZURE_CLIENT_ID=your-client-id-here
AZURE_CLIENT_SECRET=your-client-secret-here

# JWT Secret (REQUIRED - Must be same for frontend & backend!)
# Generate with: openssl rand -base64 64
JWT_SECRET=your-jwt-secret-minimum-32-characters-change-in-production

# API Port Configuration
API_PORT=8080

# Environment Mode
NODE_ENV=development
MCP_PORTAL_ENV=development

# ========================================
# INFRASTRUCTURE (PostgreSQL & Redis)
# ========================================

# PostgreSQL - Used by docker-compose.yaml
POSTGRES_DB=mcp_portal
POSTGRES_USER=postgres
POSTGRES_PASSWORD=change-in-production

# Redis - Used by docker-compose.yaml
# Leave empty for no password (development only)
REDIS_PASSWORD=

# ========================================
# FRONTEND CONFIGURATION
# ========================================

# Site URL for sitemap generation and SEO
# Set this to your production domain (e.g., https://portal.your-domain.com)
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# Backend API URLs (constructed from API_PORT)
NEXT_PUBLIC_API_URL=http://localhost:8080
NEXT_PUBLIC_WS_URL=ws://localhost:8080

# Azure AD Public Configuration
NEXT_PUBLIC_AZURE_REDIRECT_URI=http://localhost:3000/auth/callback
NEXT_PUBLIC_AZURE_POST_LOGOUT_URI=http://localhost:3000
NEXT_PUBLIC_AZURE_AUTHORITY=https://login.microsoftonline.com/${AZURE_TENANT_ID}
NEXT_PUBLIC_AZURE_SCOPES=openid profile email User.Read

# Frontend Development Settings
NEXT_PUBLIC_DEBUG=false
NEXT_PUBLIC_API_TIMEOUT=30000
NEXT_PUBLIC_WS_RECONNECT_INTERVAL=5000
NEXT_PUBLIC_LOG_LEVEL=INFO

# Feature Flags
NEXT_PUBLIC_ENABLE_WEBSOCKET=true
NEXT_PUBLIC_ENABLE_SSE=true
NEXT_PUBLIC_ENABLE_ADMIN=true
NEXT_PUBLIC_ENABLE_BULK_OPS=true
NEXT_PUBLIC_ENABLE_CONFIG_MGMT=true

# Frontend Security Settings
# JWT token storage (localStorage, sessionStorage, memory)
NEXT_PUBLIC_TOKEN_STORAGE=localStorage
NEXT_PUBLIC_SESSION_TIMEOUT=60
NEXT_PUBLIC_ENABLE_CSRF=true

# Frontend UI Configuration
NEXT_PUBLIC_DEFAULT_THEME=system
NEXT_PUBLIC_DEFAULT_PAGE_SIZE=20
NEXT_PUBLIC_STATUS_REFRESH_INTERVAL=10

# ========================================
# BACKEND CONFIGURATION
# ========================================

# Backend needs these with MCP_PORTAL_ prefix (auto-mapped from above)
MCP_PORTAL_AZURE_TENANT_ID=${AZURE_TENANT_ID}
MCP_PORTAL_AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
MCP_PORTAL_AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
MCP_PORTAL_SECURITY_JWT_SIGNING_KEY=${JWT_SECRET}
MCP_PORTAL_SERVER_PORT=${API_PORT}
MCP_PORTAL_SERVER_HOST=0.0.0.0

# Database Configuration
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
MCP_PORTAL_DATABASE_HOST=postgres
MCP_PORTAL_DATABASE_PORT=5432
MCP_PORTAL_DATABASE_DATABASE=${POSTGRES_DB}
MCP_PORTAL_DATABASE_USERNAME=${POSTGRES_USER}
MCP_PORTAL_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
MCP_PORTAL_DATABASE_SSL_MODE=prefer
MCP_PORTAL_DATABASE_MAX_CONNECTIONS=20
MCP_PORTAL_DATABASE_MIN_CONNECTIONS=2

# Redis Configuration
REDIS_URL=redis://redis:6379
MCP_PORTAL_REDIS_ADDRS=redis:6379
MCP_PORTAL_REDIS_PASSWORD=${REDIS_PASSWORD}
MCP_PORTAL_REDIS_DB=0
MCP_PORTAL_REDIS_SESSION_TTL=24h

# Security Settings
MCP_PORTAL_SECURITY_JWT_ISSUER=mcp-portal
MCP_PORTAL_SECURITY_JWT_AUDIENCE=mcp-portal
MCP_PORTAL_SECURITY_ACCESS_TOKEN_TTL=15m
MCP_PORTAL_SECURITY_REFRESH_TOKEN_TTL=7d
MCP_PORTAL_SECURITY_CSRF_TOKEN_TTL=24h
MCP_PORTAL_SECURITY_RATE_LIMIT_REQUESTS=100
MCP_PORTAL_SECURITY_RATE_LIMIT_WINDOW=1m

# CORS Configuration
MCP_PORTAL_SECURITY_ALLOWED_ORIGINS=http://localhost:3000
MCP_PORTAL_SECURITY_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
MCP_PORTAL_SECURITY_ALLOWED_HEADERS=Content-Type,Authorization,X-CSRF-Token
MCP_PORTAL_SECURITY_CORS_MAX_AGE=86400

# CLI Integration
MCP_PORTAL_CLI_BINARY_PATH=docker
MCP_PORTAL_CLI_WORKING_DIR=/tmp/mcp-portal
MCP_PORTAL_CLI_DOCKER_SOCKET=/var/run/docker.sock
MCP_PORTAL_CLI_COMMAND_TIMEOUT=5m
MCP_PORTAL_CLI_MAX_CONCURRENT=10
MCP_PORTAL_CLI_OUTPUT_BUFFER_SIZE=1048576
MCP_PORTAL_CLI_ENABLE_DEBUG=false

# Catalog Configuration
MCP_PORTAL_CATALOG_FEATURE_ENABLED=true
MCP_PORTAL_CATALOG_BASE_PATH=/app/data/catalogs/base
MCP_PORTAL_CATALOG_USER_PATH=/app/user-catalogs
MCP_PORTAL_CATALOG_CACHE_TTL=5m
MCP_PORTAL_CATALOG_MAX_CUSTOM_SERVERS=50

# Server Configuration
MCP_PORTAL_SERVER_READ_TIMEOUT=30s
MCP_PORTAL_SERVER_WRITE_TIMEOUT=30s
MCP_PORTAL_SERVER_SHUTDOWN_TIMEOUT=10s
MCP_PORTAL_SERVER_MAX_HEADER_BYTES=1048576
MCP_PORTAL_SERVER_TLS_ENABLED=false
# MCP_PORTAL_SERVER_TLS_CERT_FILE=/path/to/cert.pem
# MCP_PORTAL_SERVER_TLS_KEY_FILE=/path/to/key.pem

# ========================================
# SESSION CONFIGURATION
# ========================================

# Session Cookie Settings
SESSION_COOKIE_NAME=mcp-portal-session
SESSION_COOKIE_SECURE=false  # Set to true in production with HTTPS
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=lax

# ========================================
# OPTIONAL SERVICES
# ========================================

# Error Reporting (Optional)
# NEXT_PUBLIC_SENTRY_DSN=your-sentry-dsn-here
# NEXT_PUBLIC_ENABLE_ERROR_REPORTING=false

# Build Configuration (Optional)
# SKIP_ENV_VALIDATION=true
# ANALYZE=true

# Tracing (Langfuse)
# NEXT_PUBLIC_LANGFUSE_URL=your-langfuse-url
# LANGFUSE_PUBLIC_KEY=your-langfuse-key

# ========================================
# PRODUCTION-SPECIFIC (Optional)
# ========================================

# Production overrides (uncomment for production)
# NODE_ENV=production
# MCP_PORTAL_ENV=production
# SESSION_COOKIE_SECURE=true
# MCP_PORTAL_DATABASE_SSL_MODE=require
# MCP_PORTAL_SERVER_TLS_ENABLED=true
# NEXT_PUBLIC_DEBUG=false

# Production URLs (update with actual domains)
# NEXT_PUBLIC_SITE_URL=https://portal.mcp-portal.com
# NEXT_PUBLIC_API_URL=https://api.mcp-portal.com
# NEXT_PUBLIC_WS_URL=wss://api.mcp-portal.com
# NEXT_PUBLIC_AZURE_REDIRECT_URI=https://portal.mcp-portal.com/auth/callback
# NEXT_PUBLIC_AZURE_POST_LOGOUT_URI=https://portal.mcp-portal.com
# MCP_PORTAL_SECURITY_ALLOWED_ORIGINS=https://portal.mcp-portal.com

# =================================================================
# USAGE INSTRUCTIONS
# =================================================================
#
# 1. Copy this file: cp .env.example .env
# 2. Update all placeholder values with real configuration
# 3. Generate JWT secret: openssl rand -base64 64
# 4. Get Azure AD values from Azure Portal:
#    - Go to Azure Portal > App Registrations
#    - Find your app or create new one
#    - Copy Application (client) ID and Directory (tenant) ID
#    - Create a new client secret under Certificates & secrets
# 5. Update database passwords for production
# 6. Start services: docker-compose up
#
# Services will be available at:
#   Frontend: http://localhost:3000
#   Backend API: http://localhost:8080
#   PostgreSQL: localhost:5432
#   Redis: localhost:6379
#
# For production deployment:
#   1. Uncomment and update the production-specific section
#   2. Use docker-compose.prod.yaml instead
#   3. Follow deployment guide: ./implementation-plan/04-guides/deployment-without-docker-desktop.md
#
# =================================================================